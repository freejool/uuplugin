name: Build and Push Docker Image

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  docker:
    name: Build Docker Image (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            dockerfile: ./amd64/Dockerfile
            base_image: openwrt/rootfs:x86-64-21.02.5
          - arch: arm64
            platform: linux/arm64
            dockerfile: ./arm64/Dockerfile
            base_image: openwrt/rootfs:aarch64_generic-21.02.5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=raw,value=${{ matrix.arch }}-latest
            type=semver,pattern={{version}}-${{ matrix.arch }}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  manifest:
    name: Create and Push Manifest
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Manifest
        run: |
          docker manifest rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest || true
          # 创建并推送 latest manifest
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:amd64-latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:arm64-latest
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

          # 如果是发布版本，创建版本标签的manifest
          if [[ ${{ github.ref }} =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${VERSION} \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${VERSION}-amd64 \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${VERSION}-arm64
            docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${VERSION}
          fi
